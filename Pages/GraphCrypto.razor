@page "/graph"
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Util
@using CryptoBlazor.Data
@inject DataAccess Database

<h1>LAST 50 DAYS - Cryptocurrency history price graph</h1>

<div class="btn-group" role="group" aria-label="Basic example">
    <button @onclick="@(() => GetChartData("bitcoinHistory"))" type="button" class="btn btn-default mr-2">Bitcoin</button>
    <button @onclick="@(() => GetChartData("ethereumHistory"))" type="button" class="btn btn-default mr-2">Ethereum</button>
    <button @onclick="@(() => GetChartData("tetherHistory"))" type="button" class="btn btn-default mr-2">Tether</button>
    <button @onclick="@(() => GetChartData("bitcoin-cashHistory"))" type="button" class="btn btn-default mr-2">Bitcoin cash</button>
    <button @onclick="@(() => GetChartData("bitcoin-svHistory"))" type="button" class="btn btn-default mr-2">Bitcoin SV</button>
    <button @onclick="@(() => GetChartData("litecoinHistory"))" type="button" class="btn btn-default mr-2">Litecoin</button>
    <button @onclick="@(() => GetChartData("eosHistory"))" type="button" class="btn btn-default mr-2">EOS</button>
    <button @onclick="@(() => GetChartData("binance-coinHistory"))" type="button" class="btn btn-default mr-2">Binance coin</button>
    <button @onclick="@(() => GetChartData("tezosHistory"))" type="button" class="btn btn-default mr-2">Tezos</button>
    <button @onclick="@(() => GetChartData("unus-sed-leoHistory"))" type="button" class="btn btn-default mr-2">Unus sed leo</button>
</div>

<ChartJsLineChart @ref="_lineChartJs" Config="@_lineConfig" Width="50" Height="20" />


@code {
    Dictionary<string, CryptoHistoryPrices> prices = new Dictionary<string, CryptoHistoryPrices>();
    LineConfig _lineConfig;
    ChartJsLineChart _lineChartJs;
    private LineDataset<TimeTuple<double>> _WeightDataSet;

    DateTime ConvertStringToDateTime(string date)
    {
        DateTime newDate = new DateTime();
        newDate = DateTime.Parse(date, null, System.Globalization.DateTimeStyles.RoundtripKind);
        
        return newDate;
    }
    
    async Task GetChartData(string collectionName)
    {
        if (prices.ContainsKey(collectionName) == false)
        {
            await GetCryptoData(collectionName);
        }
        _WeightDataSet.RemoveAll(e => true);
        _WeightDataSet.AddRange(prices[collectionName].historyPrices.Select(p => 
            new TimeTuple<double>(new Moment(ConvertStringToDateTime(p.Datetime)), p.PriceUsd)));
        
        _lineConfig.Data.Datasets.Clear();
        _lineConfig.Data.Datasets.Add(_WeightDataSet);
        await _lineChartJs.Update();
    }
    
    protected async Task GetCryptoData(string collectionName)
    {
        prices[collectionName] = await Database.GetCryptoData(collectionName);
        Console.WriteLine(prices[collectionName].Name);
    }
    
    protected override async Task OnInitializedAsync()
    {
        _lineConfig = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "History price Chart"
                },
                Legend = new Legend
                {
                    Display = false
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    yAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Price"
                            }
                        }
                    },
                    xAxes = new List<CartesianAxis>
                    {
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Data
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Day,
                                Round = TimeMeasurement.Day,
                                TooltipFormat = "MM.DD.YYYY",
                                DisplayFormats = TimeDisplayFormats.DE_CH
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Date"
                            }
                        }
                    }
                },
                Hover = new LineOptionsHover
                {
                    Intersect = true,
                    Mode = InteractionMode.Y
                }
            }
        };
        
        _WeightDataSet = new LineDataset<TimeTuple<double>>
        {
            BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.White),
            BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Red),
            Label = "Price per Day",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 2,
            PointBorderWidth = 2,
            SteppedLine = SteppedLine.False,
            Hidden = false
        };
    }
}

<style>
    .btn
    {
        background-color: #202020;
        border: none;
        color: white;
    }
    .btn:hover
    {
        background-color: #505050;
        color: white;
    }
    .btn:active
    {
        background-color: #505050;
        color: white;
        box-shadow: none;
    }
    .btn:focus
    {
        color: white;
        box-shadow: none;
    }
    .btn:hover:active:focus
    {
        background-color: #505050;
        color: white;
        box-shadow: none;
    }
</style>
